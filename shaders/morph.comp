#version 450
#extension GL_ARB_separate_shader_objects : enable

/*
Notes:

Node state:

A node is inactive if neighbors[i] == -2.0, and an active
node has neighbors[i] != -2.0. Ow undefined.

A node has a topology change message if top_data[i] != -2.0, and
a node with no message has top_data[i] == -2.0. Ow undefined.

Queue:

The queue should guarantee that for any successful pop, no other
invocation will access that cell in the queue during this iteration.
Across iterations there is no such guarantee.
The "winning" invocation becomes the owner of the value in that
queue cell.

start_ptr[cur_index] points to the first available cell (or
to end_ptr[cur_index] if no cells are available).
end_ptr[cur_index] points one past the last used cell (or to 
start_ptr[cur_index] if no cells are available). This is an 
empty cell unless the queue is full.

Note that the ptrs should only ever be incremented.
Renormalizing them (mod queue_len) would break invariants.
*/

// the workgroup x size is a specialization constant
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Unifs {
  // node_count includes active and inactive nodes
  uint node_count;
  uint inactive_node_count;
  uint iter_num;
  uint queue_len;

// BEGIN_USER_UNIFS
  // comps 1 min 0.0 max 1.0 speed 1.0 def 1.0
  vec4 pos_step_active;
  // comps 1 min 0.0 max 1.0 speed 1.0 def 1.0
  vec4 heat_step_active;
  // comps 1 min 0.0 max 1.0 speed 1.0 def 1.0
  vec4 source_step_active;
  // comps 1 min 0.0 max 1.0 speed 1.0 def 1.0
  vec4 top_step_active;
  // comps 1 min 0.0 max 1.0 speed 0.001 def 0.5
  vec4 norm_src_pos;
  // comps 3 min -1.0 max 1.0 speed 0.001 def 0.0 1.0 0.0
  vec4 init_src_dir;
  // comps 1 min 0.0 max 100.0 speed 0.01 def 10.0
  vec4 src_heat_gen_rate;
  // comps 1 min 0.0 max 1.0 speed 0.001 def 0.2
  vec4 heat_transfer_coeff;
  // comps 1 min 0.0 max 3.0 speed 0.01 def 0.06
  vec4 target_spring_len;
  // comps 2 min 0.0 max 1.0 speed 0.01 def 0.0 0.1
  vec4 spring_coeffs;
  // comps 3 min 0.0 max 3.0 speed 0.01 def 0.0 0.25 0.25
  vec4 force_coeffs;
  // comps 3 min 0.0 max 1.0 speed 0.001 def 0.05 0.0 0.0
  vec4 src_trans_probs;
  // comps 3 min 0.0 max 1.0 speed 0.005 def 1.0 1.0 0.5
  vec4 cloning_coeffs;
  // comps 1 min 0.0 max 600.0 speed 0.1 def 40.0
  vec4 cloning_interval;
  // comps 1 min 0.0 max 20.0 speed 0.1 def 3.0
  vec4 expansion_interval;
  // comps 1 min 0.0 max 3.0 speed 0.01 def 0.5
  vec4 annealing_threshold;
// END_USER_UNIFS
} unif;

int id() {
  return int(gl_GlobalInvocationID.x);
}

struct Node {
  vec4 pos;
  vec4 vel;
  vec4 neighbors;
  vec4 data;
  vec4 top_data;
};

layout(binding = 0, rgba32f) uniform readonly imageBuffer in_pos;
layout(binding = 1, rgba32f) uniform readonly imageBuffer in_vel;
layout(binding = 2, rgba32f) uniform readonly imageBuffer in_neighbors;
layout(binding = 3, rgba32f) uniform readonly imageBuffer in_data;
layout(binding = 4, rgba32f) uniform readonly imageBuffer in_top_data;

layout(binding = 5, rgba32f) uniform writeonly imageBuffer out_pos;
layout(binding = 6, rgba32f) uniform writeonly imageBuffer out_vel;
layout(binding = 7, rgba32f) uniform writeonly imageBuffer out_neighbors;
layout(binding = 8, rgba32f) uniform writeonly imageBuffer out_data;
layout(binding = 9, rgba32f) uniform writeonly imageBuffer out_top_data;

layout(binding = 10) buffer ComputeStorage {
  uint step_counters[2];

  uint start_ptrs[2];
  uint end_ptrs[2];
  uint queue_mem[];
} store;

const float pi = 3.141592;

// Noise functions

vec2 hash2(vec2 p) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }
vec3 hash3(float n) { return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(338.5453123,278.1459123,191.1234)); }
float hash(vec2 p) {
	return fract(dot(hash2(p),vec2(1.0,0.0)));
}
vec3 hash3(vec3 p) {
	p=vec3(dot(p,vec3(127.1,311.7,732.1)),dot(p,vec3(269.5,183.3,23.1)),dot(p,vec3(893.1,21.4,781.2))); return fract(sin(p)*18.5453);	
}
float hash3to1(vec3 p) {
	return fract(dot(hash3(p),vec3(32.32,321.3,123.2)));
}

// Returns the normal as xyz, and length as w.
// If v is a zero-vec, returns length 0 and a norm of (1,0,0)
vec4 safe_norm(vec3 v) {
  float len = length(v);
  vec3 norm = len == 0.0 ? vec3(1.0,0.0,0.0) : v / len;
  return vec4(norm, len);
}

Node load_node(int id) {
  Node node = {
    imageLoad(in_pos, id),
    imageLoad(in_vel, id),
    imageLoad(in_neighbors, id),
    imageLoad(in_data, id),
    imageLoad(in_top_data, id)
  };
  return node;
}

void store_node(int id, Node node) {
  imageStore(out_pos, id, node.pos);
  imageStore(out_vel, id, node.vel);
  imageStore(out_neighbors, id, node.neighbors);
  imageStore(out_data, id, node.data);
  imageStore(out_top_data, id, node.top_data);
}

bool push_value(uint val) {
  uint cur_index = unif.iter_num & 1;
  uint next_index = (unif.iter_num + 1) & 1;

  uint start_ptr = store.start_ptrs[cur_index];
  uint orig_ptr = atomicAdd(
    store.end_ptrs[next_index], 1);
  if (orig_ptr - start_ptr + 1 <= unif.queue_len) {
    store.queue_mem[orig_ptr % unif.queue_len] = val;
    return true;
  }
  return false;
}

bool pop_value(out uint res) {
  uint cur_index = unif.iter_num & 1;
  uint next_index = (unif.iter_num + 1) & 1;

  uint end_ptr = store.end_ptrs[cur_index];
  uint orig_ptr = atomicAdd(
    store.start_ptrs[next_index], 1);
  if (orig_ptr < end_ptr) {
    res = store.queue_mem[orig_ptr % unif.queue_len];  
    return true;
  }
  return false;
}

Node run_init_step(Node in_node) {
  uint active_node_count = unif.node_count - unif.inactive_node_count;
  int side_len = int(sqrt(active_node_count));
  int target_src_id = int(active_node_count *
    unif.norm_src_pos.x + 0.5 * side_len);
  vec4 vel = vec4(0.0);
  if (id() == target_src_id) {
    vel = vec4(normalize(unif.init_src_dir.xyz),
      unif.src_heat_gen_rate.x);
  }
  Node out_node = in_node;
  out_node.vel = vel;
  return out_node;
}

int index_of_val(vec4 vals, float target_val) {
  for (int i = 0; i < 4; ++i) {
    if (vals[i] == target_val) {
      return i;    
    }
  }
  return -1;
}

// Returns the index in my_id in the neighbors array of n_id
int index_of_edge(int my_id, int n_id) {
  vec4 n_neighbors = imageLoad(in_neighbors, n_id);
  return index_of_val(n_neighbors, float(my_id));
}

float read_edge_message(int my_id, int n_id, vec4 messages) {
  return messages[index_of_edge(my_id, n_id)];
}

vec4 compute_heat_emit(float cur_heat, vec4 node_neighbors) { 
  float alpha = unif.heat_transfer_coeff.x;
  vec4 out_heats = vec4(0.0);
  for (int i = 0; i < 4; ++i) {
    int n_index = int(node_neighbors[i]);
    if (n_index == -1.0) {
      // treat exterior as 0-heat neighbor
      out_heats[i] = alpha * cur_heat;
    } else {
      float n_heat = imageLoad(in_pos, n_index).w;
      if (n_heat < cur_heat) {
        out_heats[i] = alpha * (cur_heat - n_heat);
      }
    }
  }
  // normalize the amt emit out each edge so that we don't emit
  // more than we have available
  float total_emit = dot(out_heats, vec4(1.0));
  if (total_emit > 0.0) {
    out_heats = (out_heats / total_emit) * min(total_emit, cur_heat);
  }
  return out_heats;  
}

// Conserves heat and enforces a min heat of 0
// Note: this strategy works so long as compute_heat_emit conserves
// heat, which is nice.
// Mental model: at every frame transition you send out heat to neighbors
// and simultaneously receive heat from them.
float compute_next_heat(Node in_node) {
  vec4 my_out_heats = compute_heat_emit(in_node.pos.w, in_node.neighbors);
  float total_heat_out = dot(my_out_heats, vec4(1.0));

  float total_heat_in = 0.0;
  for (int i = 0; i < 4; ++i) {
    int n_index = int(in_node.neighbors[i]);
    if (n_index == -1.0) {
      continue;
    }
    float other_heat = imageLoad(in_pos, n_index).w;
    if (in_node.pos.w < other_heat) {
      // the heat in from this neighbor is the heat that it emits along
      // the edge pointing to this node
      vec4 other_neighbors = imageLoad(in_neighbors, n_index);
      vec4 other_out_heats = compute_heat_emit(other_heat, other_neighbors);
      total_heat_in += other_out_heats[index_of_val(other_neighbors, float(id()))];
    }
  }
  total_heat_in += in_node.vel.w;
  return in_node.pos.w - total_heat_out + total_heat_in;
}

vec3 node_normal(vec3 node_pos, vec4 node_neighbors) {
  vec3 nor = vec3(0.0,1.0,0.0);
  for (int i = 0; i < 4; ++i) {
    int i_a = int(node_neighbors[i]);
    int i_b = int(node_neighbors[(i + 1) % 4]);
    if (i_a != -1 && i_b != -1) {
      vec3 p_a = imageLoad(in_pos, i_a).xyz;
      vec3 p_b = imageLoad(in_pos, i_b).xyz;
      // TODO - why is this the 'up' direction, seems like the negative
      // sign should be unneccessary
      nor = normalize(-cross(p_a - node_pos, p_b - node_pos));
      break;
    }
  }
  return nor;
}

int rand_neighbor_index(vec3 node_pos, vec4 node_neighbors) {
  int n_index = clamp(int(4.0 * hash3(unif.iter_num * node_pos).x), 0, 3);
  // incr n_index until we find a valid neighbor
  for (int i = 0; i < 4; ++i) {
    if (node_neighbors[n_index] == -1.0) {
      n_index = (n_index + 1) % 4;
    }
  }
  return n_index;
}

// Return the index of the neighbor that is furthest in the target direction
// Note: target_dir must be normalized
int directed_neighbor(vec3 node_pos, vec4 node_neighbors, vec3 target_dir) {
  int out_index = -1;
  float largest_dot = -2.0;
  for (int i = 0; i < 4; ++i) {
    int n_index = int(node_neighbors[i]);
    if (n_index != -1) {
      vec3 n_pos = imageLoad(in_pos, n_index).xyz;
      float d = dot(n_pos - node_pos, target_dir);
      if (out_index == -1 || d > largest_dot) {
        out_index = i;
        largest_dot = d;
      }
    }
  }
  return out_index;
}

void compute_source_transition(Node in_node, out vec4 out_vel, out vec4 out_data) {
  vec4 next_vel = in_node.vel;
  vec4 next_data = vec4(-1.0);

  vec3 trans_noise = hash3(in_node.pos.xyz * unif.iter_num);
  if (in_node.vel.w == 0.0) {
    // check if a neighbor has requested to be cloned
    bool did_promote = false;
    for (int i = 0; i < 4; ++i) {
      int n_index = int(in_node.neighbors[i]);
      if (n_index == -1) {
        continue;
      }
      vec4 n_data = imageLoad(in_data, n_index);
      if (int(n_data.w) == index_of_edge(id(), n_index)) {
        // neighbor has requested that this node be its clone
        float gen_amt = length(n_data.xyz);
        next_vel = vec4(normalize(n_data.xyz), gen_amt);
        next_data = vec4(-1.0);
        did_promote = true;
      }
    }

    // promote this node to a src with some probability
    // Note: this is turned off for now
    if (!did_promote && trans_noise.z < unif.src_trans_probs.z) {
      vec3 nor = node_normal(in_node.pos.xyz, in_node.neighbors);
      next_vel = vec4(nor, unif.src_heat_gen_rate.x);
      next_data = vec4(-1.0);
    }
  } else {
    // this node is currently a source

    // clone if right conditions
    bool is_cloning = false;
    if (unif.iter_num % int(unif.cloning_interval.x) == 0) {
      // turn on the request
      // Note that we encode the gen_amt as the vector len.
      // This only works b/c the gen_amt is strictly positive!
      
      // create two new vecs mirrored across the current vec
      // pi * cloning_coeffs.z is the desired angle b/w the two vecs
      float tangent_len = tan(0.5 * pi * unif.cloning_coeffs.z);
      vec3 tangent_vec =
        tangent_len * normalize(cross(in_node.vel.xyz, trans_noise));
      vec3 my_dir = normalize(in_node.vel.xyz - tangent_vec);
      vec3 clone_dir = normalize(in_node.vel.xyz + tangent_vec);

      float clone_gen_amt = unif.cloning_coeffs.y * in_node.vel.w;
      //int target_n = rand_neighbor_index(in_node.pos.xyz, in_node.neighbors);
      int target_n = directed_neighbor(in_node.pos.xyz, in_node.neighbors, clone_dir);
      next_vel = vec4(my_dir, unif.cloning_coeffs.x * in_node.vel.w);
      next_data = vec4(clone_gen_amt * clone_dir, target_n);
      is_cloning = true;
    }

    // traverse mesh if right conditions
    // Note: this is turned off for now
    bool is_walking = false;
    if (!is_cloning && trans_noise.y < unif.src_trans_probs.y) {
      // TODO - Note that neighbor could be a src, in which case
      // we effectively eliminate a src.
      //int target_n = rand_neighbor_index(in_node.pos.xyz, in_node.neighbors);
      int target_n = directed_neighbor(in_node.pos.xyz, in_node.neighbors, in_node.vel.xyz);
      next_vel = vec4(0.0);
      next_data = vec4(in_node.vel.w * in_node.vel.xyz, target_n);
      is_walking = true;
    }

    if (!is_cloning && !is_walking) {
      // no msg for neighbors
      next_vel = in_node.vel;
      next_data = vec4(-1.0);
    }
  }
  out_vel = next_vel;
  out_data = next_data;
}

/*
Pop the indices of four inactive nodes to use as neighbors during expansion.
Returns true iff success.
*/
bool pop_new_neighbors(out vec4 out_neighbors) {
  // If cannot pop all that are required, attempt to free anything we have already popped
  for (int i = 0; i < 4; ++i) {
    uint val = 0;
    if (!pop_value(val)) {
      for (int j = 0; j < i; ++j) {
        if (out_neighbors[j] != -1.0) {
          push_value(uint(out_neighbors[j]));
        }
      }
      return false;
    }
    out_neighbors[i] = float(val);
  }
  return true;
}

/*
Note that it may be that a node is both a center of expansion
and is adjacent to another center of expansion (thereby having messages
for it along its edge that to node).
Each center of expansion ignores the edge change requests b/c instead
new nodes will be spliced in. However, those new nodes must check their
outgoing edge (which is the edge opposite to the one that goes to the 
center of expansion / parent) for messages, in the same way that all
non-expanding nodes check for messages. This is handled in the step for 
inactive nodes.
*/
void compute_topology_transition(Node in_node, out vec4 next_neighbors,
  out vec4 next_top_data) {

  next_neighbors = in_node.neighbors;
  next_top_data = in_node.top_data;

  if (in_node.top_data.x != -2.0) {
    // this node in the center of an expansion. complete expansion
    next_neighbors = in_node.top_data;
    next_top_data = vec4(-2.0);
  } else {
    // apply topology changes requested by neighbors
    for (int i = 0; i < 4; ++i) {
      float n_index = in_node.neighbors[i];
      if (n_index == -1.0) {
        continue;
      }
      vec4 n_top_data = imageLoad(in_top_data, int(n_index));
      float edge_request = read_edge_message(id(), int(n_index), n_top_data);
      if (edge_request != -2.0) {
        next_neighbors[i] = edge_request;
      }
    }

    // possibly expand about this node.
    // Conditions: only expand source nodes
    // and do not expand nodes with fixed (-1.0) edges
    bool is_interior_node = !any(equal(in_node.neighbors, vec4(-1.0)));
    if (in_node.vel.w != 0.0 && is_interior_node &&
      (unif.iter_num % int(unif.expansion_interval.x) == 0)) {
      // get the indices of four reserved nodes
      vec4 n_indices = vec4(0.0);
      if (pop_new_neighbors(n_indices)) {
        next_top_data = n_indices;

        // setup the reserved node so that
        // it will splice itself into the mesh on the next iter
        // (b/w this node and our current neighbors)
        for (int i = 0; i < 4; ++i) {
          vec4 splice_neighbors = vec4(0.0);
          splice_neighbors[i] = in_node.neighbors[i];
          splice_neighbors[(i + 1) % 4] = n_indices[(i + 1) % 4];
          splice_neighbors[(i + 2) % 4] = id();
          splice_neighbors[(i + 3) % 4] = n_indices[(i + 3) % 4];
          // store its neighbors into top_data
          imageStore(out_top_data, int(n_indices[i]), splice_neighbors);
          // store the edge of the central node into data.x
          // this is used to compute the starting position
          int parent_edge_index = (i + 2) % 4;
          imageStore(out_data, int(n_indices[i]),
            vec4(float(parent_edge_index), 0.0, 0.0, 0.0));
        }
      }
    }
  }
}

vec3 compute_next_pos(Node in_node) {
  bool is_fixed = false;
  vec3 force = vec3(0.0);
  vec3 delta_heat = vec3(0.0);
  float largest_delta = 0.0;
  for (int i = 0; i < 4; ++i) {
    int n_i = int(in_node.neighbors[i]);
    if (n_i != -1) {
      vec4 n_pos = imageLoad(in_pos, n_i);
      vec4 delta_norm = safe_norm(n_pos.xyz - in_node.pos.xyz);
      float spring_len = delta_norm.w;
      float spring_factor = spring_len < unif.target_spring_len.x ?
        unif.spring_coeffs.x : unif.spring_coeffs.y;
      force += spring_factor * delta_norm.xyz *
        (spring_len - unif.target_spring_len.x);

      if (n_pos.w - in_node.pos.w > largest_delta) {
        delta_heat = delta_norm.xyz;      
        largest_delta = n_pos.w - in_node.pos.w;
      }
    } else {
      is_fixed = true;
    }
  }

  if (in_node.vel.w != 0.0) {
    force += unif.force_coeffs.y * in_node.vel.xyz;
  } else {
    force += unif.force_coeffs.z * delta_heat;
  }
  // anneal if low heat (eh, this did not work out)
  //force *= clamp(in_node.pos.w, 0.0, 1.0);
  if (in_node.pos.w < unif.annealing_threshold.x) {
    force = vec3(0.0);
  }

  vec3 p_next = in_node.pos.xyz + force; 

  if (is_fixed) {
    p_next = in_node.pos.xyz;
  }
  return p_next;
}

Node step_active_node(Node in_node) {
  Node out_node = in_node;
  if (int(unif.pos_step_active.x) == 1.0) {
    out_node.pos.xyz = compute_next_pos(in_node);
  }
  if (int(unif.heat_step_active.x) == 1.0) {
    out_node.pos.w = compute_next_heat(in_node);
  }
  if (int(unif.source_step_active.x) == 1.0) {
    compute_source_transition(in_node, out_node.vel, out_node.data);
  }
  if (int(unif.top_step_active.x) == 1.0) {
    compute_topology_transition(in_node,
      out_node.neighbors, out_node.top_data);
  }
  
  return out_node;
}

Node step_inactive_node(Node in_node, out bool should_step) {
  // unless this node has a message written to it, we should not
  // write to its location because another node may be sending
  // it a message (which we do not wish to overwrite)
  should_step = false;
  Node out_node = in_node;
  if (in_node.top_data.x != -2.0) {
    should_step = true;
    int parent_n_id = int(in_node.data.x);
    int parent_id = int(in_node.top_data[parent_n_id]);
    int opposite_id = int(in_node.top_data[(parent_n_id + 2) % 4]);
    
    // this node starts at the avg xyz pos of its two pole nodes,
    // and with 0 heat
    vec3 parent_pos = imageLoad(in_pos, parent_id).xyz;
    vec3 opposite_pos = imageLoad(in_pos, opposite_id).xyz;
    vec4 starting_pos = vec4(0.5 * (parent_pos + opposite_pos), 0.0);

    // in case this node is adjacent to two expanding nodes, check
    // for edge requests from the non-parent expanding node
    vec4 neighbors = in_node.top_data;
    vec4 opp_top_data = imageLoad(in_top_data, opposite_id);
    float edge_request = read_edge_message(parent_id, opposite_id, opp_top_data);
    if (edge_request != -2.0) {
      neighbors[(parent_n_id + 2) % 4] = edge_request;
    }

    out_node = Node(
      starting_pos,
      vec4(0.0),
      neighbors,
      vec4(-1.0),
      vec4(-2.0));
  }
  return out_node;
}

Node run_reg_step(Node in_node, out bool should_step) {
  should_step = true;
  Node out_node = in_node;
  if (in_node.neighbors.x == -2.0) {
    out_node = step_inactive_node(in_node, should_step);
  } else {
    out_node = step_active_node(in_node);
  }
  return out_node;
}

Node step(Node in_node, out bool should_step) {
  should_step = true;
  Node out_node = in_node;
  if (unif.iter_num == 0) {
    out_node = run_init_step(in_node);
  } else {
    out_node = run_reg_step(in_node, should_step);
  }
  return out_node;
}

// for debugging
Node test_step(Node in_node) {
  Node out_node = in_node;
  out_node.pos += vec4(1.0,0.0,0.0,0.0);
  return out_node;
}

// for debugging
Node dummy_step(Node in_node) {
  return in_node;
}

// for debugging
Node dummy_step2(Node in_node) {
  Node out_node = in_node;
  out_node.pos += vec4(1.0);
  //out_node.vel += vec4(1.0);
  //out_node.neighbors = vec4(1.0);
  //out_node.data += vec4(1.0);
  return out_node;
}

// TODO - we may actually have to use a separate compute stage
// unsure if the writes from other invocations are available,
// even though the ctr mechanism guarentees that they happened
// before now. Actually, they should be provided we're only working
// with atomics (access serialized and available).
// Double-check that such is guaranteed.
void exclusive_step() {
  // prepare the queue for the next iter
  uint cur_index = unif.iter_num & 1;
  uint next_index = (unif.iter_num + 1) & 1;
  
  // Note: are atomics really necessary here?
  atomicMin(store.start_ptrs[next_index],
    store.end_ptrs[cur_index]);
  atomicMin(store.end_ptrs[next_index],
    store.start_ptrs[cur_index] + unif.queue_len);
  atomicExchange(store.start_ptrs[cur_index],
    store.start_ptrs[next_index]);
  atomicExchange(store.end_ptrs[cur_index],
    store.end_ptrs[next_index]);
}

// for debugging
void test_queue() {
  int id = id();
  if (id == 0 || id == 1 || id == 2 || id == 3) {
    uint val;
    bool res = pop_value(val);
    if (res) {
      imageStore(out_pos, id, vec4(float(val)));
    }
    push_value(uint(id));
  }
  /*
  if (id == 0) {
    bool res = push_value(7);
  }
  */
}

// For debugging the imageStore to index >= 4096 issue
void debug_main() {
  int id = id();
  int img_size = imageSize(out_pos);
  imageStore(out_pos, id, vec4(float(img_size)));
  if (id < unif.node_count) {
    atomicAdd(store.step_counters[0], 1);
    atomicMax(store.step_counters[1], id);
  }
}

void main() {
  int id = int(gl_GlobalInvocationID.x); 
  if (id >= unif.node_count) {
    return;  
  }

  Node in_node = load_node(id);
  bool should_step = true;
  Node out_node = step(in_node, should_step);
  if (should_step) {
    store_node(id, out_node);
  }
  
  //test_queue();

  // increment the current counter, and perform an exclusive step if
  // we are the last node to get here. 
  // clear the next counter to 0
  uint orig_ctr = atomicAdd(
    store.step_counters[unif.iter_num & 1], 1);
  if (orig_ctr == unif.node_count - 1) {
    exclusive_step(); 
  }
  atomicExchange(
    store.step_counters[(unif.iter_num + 1) & 1], 0);
}

